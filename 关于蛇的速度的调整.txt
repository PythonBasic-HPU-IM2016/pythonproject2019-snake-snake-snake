叙述：首先，这个贪吃蛇的移动原理是不断的添头去尾，本身是没有一个关于蛇的速度的概念，只有刷新频率的快慢，所以，我们这个游戏的fps其实也就相当于蛇的速度，我们通过控制fps来控制蛇的速度.
经历：
一、	我们设置了一个全局变量snake_speed,并在蛇每次吃到水果的时候引用全局变量，改变值为加一，并在游戏结束时重置蛇的速度为15.
缺点：1、过快的速度增加，游戏难度倍增；2、蛇身加长本身也是难度加长，同时还速度加快，这样设计非人类；3、代码本身与我们从开始所坚持的模块化设计思想有冲突，这样设计使我们的结构变得不那么明朗。
二、	我们增加了一个snake_speed_change函数，在函数中控制蛇的速度，有了第一次的经验，我们先将蛇的初始速度定为5，再根据蛇的长度来确定是否再给蛇加速。
我们设定在蛇身(len(snake_coords))<=35时，蛇的速度会每三格加一(speed = 5 +len(snake_coords)//3),同时在蛇的速度大于5的前提下，蛇身超过35后会每三格减一(speed =15 -
len(snake_coords)//3),最后速度维持在5
缺点：1、初玩感觉还行，但时间一长就感觉很难受，是速度为5的时候，刷新频率太低，蛇的移动不流畅所致，经多次验证，fps最低为10才看着勉强可以，同时fps在20左右，蛇就已经跑的很快了，所以得出结论fps尽量是在（10-25）之间，玩家最有游戏体验。2、速度公式还是有问题，但由于，我不是主弄这个的，我就试着随便调了调。
三、 	最终我们得到了如下速度调节的代码
代码：
#蛇的速度
def snake_speed_change(carry,speed,snake_coords):
    if len(snake_coords) <= 30:
        speed = 10 + len(snake_coords)*(1/2)
    else:
        if speed > 10:
            speed = 21 - len(snake_coords)*(1/2)
    #print(len(snake_coords))
    if poison:
        return speed/3
    else:
        if carry:#蛇加速 
            return 2*speed
        else:
            return speed   